module.exports = "@export ecgl.vfParticle.particle.fragment\n\nuniform sampler2D particleTexture;\nuniform sampler2D spawnTexture;\nuniform sampler2D velocityTexture;\n\nuniform float deltaTime;\nuniform float elapsedTime;\n\nuniform float speedScaling : 1.0;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n    vec4 p = texture2D(particleTexture, v_Texcoord);\n    if (p.w > 0.0) {\n        vec4 vTex = texture2D(velocityTexture, p.xy);\n        vec2 v = vTex.xy;\n        v = (v - 0.5) * 2.0;\n        p.z = length(v);\n        p.xy += v * deltaTime / 50.0 * speedScaling;\n                p.xy = fract(p.xy);\n        p.w -= deltaTime;\n    }\n    else {\n        p = texture2D(spawnTexture, fract(v_Texcoord + elapsedTime / 10.0));\n        p.z = 0.0;\n    }\n    gl_FragColor = p;\n}\n@end\n\n@export ecgl.vfParticle.renderPoints.vertex\n\n#define PI 3.1415926\n\nattribute vec2 texcoord : TEXCOORD_0;\n\nuniform sampler2D particleTexture;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nuniform float sizeScaling : 1.0;\n\nvoid main()\n{\n    vec4 p = texture2D(particleTexture, texcoord);\n\n    if (p.w > 0.0) {\n        gl_Position = worldViewProjection * vec4(p.xy * 2.0 - 1.0, 0.0, 1.0);\n    }\n    else {\n        gl_Position = vec4(100000.0, 100000.0, 100000.0, 1.0);\n    }\n\n    gl_PointSize = sizeScaling * p.z;\n}\n\n@end\n\n@export ecgl.vfParticle.renderPoints.fragment\n\nuniform sampler2D spriteTexture;\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvoid main()\n{\n    gl_FragColor = color * texture2D(spriteTexture, gl_PointCoord);\n}\n\n@end\n";
